[
  {
    "id": "DE_AL_1",
    "category": "Development & Engineering",
    "sub_skill": "Algorithmic Logic",
    "type": "msq",
    "difficulty": "easy",
    "cognitive_process": "apply",
    "question": "A flowchart checks if number > 5. If number = 3, which path executes?",
    "options": ["True branch", "False branch", "Both branches", "Loop restarts"],
    "answer": "False branch",
    "explanation": "Since 3 is not greater than 5, the False branch executes.",
    "theory": "Conditional branching in algorithms.",
    "justification_of_question": "Tests basic understanding of decisions in flowcharts.",
    "expected_time": 20,
    "hint": "Compare the given value with 5.",
    "keywords": ["flowchart", "condition", "decision"]
  },
  {
    "id": "DE_AL_2",
    "category": "Development & Engineering",
    "sub_skill": "Algorithmic Logic",
    "type": "msq",
    "difficulty": "medium",
    "cognitive_process": "analyze",
    "question": "In a loop that adds numbers from 1 to 5, what is the final total?",
    "options": ["10", "15", "20", "25"],
    "answer": "15",
    "explanation": "1+2+3+4+5 = 15.",
    "theory": "Iterative summation in simple loops.",
    "justification_of_question": "Evaluates reasoning in iterative logic.",
    "expected_time": 25,
    "hint": "Add numbers from 1 to 5.",
    "keywords": ["loop", "sum", "iteration"]
  },
  {
    "id": "DE_AL_3",
    "category": "Development & Engineering",
    "sub_skill": "Algorithmic Logic",
    "type": "msq",
    "difficulty": "medium",
    "cognitive_process": "analyze",
    "question": "Which part of an algorithm ensures repetition until a condition becomes false?",
    "options": ["Decision", "Loop", "Variable", "Constant"],
    "answer": "Loop",
    "explanation": "Loops enable repetition until a condition changes.",
    "theory": "Control structures – repetition.",
    "justification_of_question": "Measures understanding of iterative logic.",
    "expected_time": 25,
    "hint": "Think 'while' or 'for'.",
    "keywords": ["loop", "repetition"]
  },
  {
    "id": "DE_AL_4",
    "category": "Development & Engineering",
    "sub_skill": "Algorithmic Logic",
    "type": "true_false",
    "difficulty": "easy",
    "cognitive_process": "understand",
    "question": "True or False: A decision box in a flowchart always has two output paths.",
    "options": ["True", "False"],
    "answer": "True",
    "explanation": "A decision can result in True or False outcomes.",
    "theory": "Flowchart decision structures.",
    "justification_of_question": "Confirms fundamental flowchart knowledge.",
    "expected_time": 15,
    "hint": "Think yes/no paths.",
    "keywords": ["decision box", "flowchart"]
  },
  {
    "id": "DE_AL_5",
    "category": "Development & Engineering",
    "sub_skill": "Algorithmic Logic",
    "type": "msq",
    "difficulty": "medium",
    "cognitive_process": "apply",
    "question": "Which control structure is best suited for checking multiple conditions one by one?",
    "options": ["If-Else Ladder", "For Loop", "Goto", "While Loop"],
    "answer": "If-Else Ladder",
    "explanation": "If-Else ladders handle multiple conditions in sequence.",
    "theory": "Conditional branching in algorithms.",
    "justification_of_question": "Tests understanding of multi-branch decision logic.",
    "expected_time": 30,
    "hint": "Used when more than two choices exist.",
    "keywords": ["if-else", "branching"]
  },
  {
    "id": "DE_AL_6",
    "category": "Development & Engineering",
    "sub_skill": "Algorithmic Logic",
    "type": "msq",
    "difficulty": "hard",
    "cognitive_process": "analyze",
    "question": "If an algorithm swaps two numbers using a temporary variable, what happens if you forget to assign one variable at the end?",
    "options": ["Values remain same", "Values reset to zero", "Only one value changes", "Program crashes"],
    "answer": "Only one value changes",
    "explanation": "Without the final assignment, one variable keeps its old value.",
    "theory": "Algorithmic sequence and assignment operations.",
    "justification_of_question": "Evaluates logical sequence in basic algorithms.",
    "expected_time": 40,
    "hint": "Follow the steps mentally.",
    "keywords": ["swap", "variables", "sequence"]
  },
  {
    "id": "DE_AL_7",
    "category": "Development & Engineering",
    "sub_skill": "Algorithmic Logic",
    "type": "msq",
    "difficulty": "easy",
    "cognitive_process": "apply",
    "question": "What does the symbol ‘→’ represent in an algorithm description?",
    "options": ["Output", "Assignment", "Decision", "Connector"],
    "answer": "Assignment",
    "explanation": "It denotes assigning a value to a variable.",
    "theory": "Algorithmic notation.",
    "justification_of_question": "Checks familiarity with algorithm symbols.",
    "expected_time": 15,
    "hint": "Think variable update.",
    "keywords": ["symbol", "assignment"]
  },
  {
    "id": "DE_AL_8",
    "category": "Development & Engineering",
    "sub_skill": "Algorithmic Logic",
    "type": "msq",
    "difficulty": "medium",
    "cognitive_process": "analyze",
    "question": "A student writes: IF mark >= 75 THEN grade = 'A' ELSE grade = 'B'. If mark = 74, what grade?",
    "options": ["A", "B", "Error", "None"],
    "answer": "B",
    "explanation": "74 < 75, so ELSE branch executes.",
    "theory": "Conditional operators.",
    "justification_of_question": "Tests numeric comparison and logic boundaries.",
    "expected_time": 25,
    "hint": "Check the condition carefully.",
    "keywords": ["if-else", "comparison"]
  },
  {
    "id": "DE_AL_9",
    "category": "Development & Engineering",
    "sub_skill": "Algorithmic Logic",
    "type": "msq",
    "difficulty": "medium",
    "cognitive_process": "apply",
    "question": "Which is the correct order of steps in algorithm design?",
    "options": ["Coding → Designing → Testing", "Designing → Coding → Testing", "Testing → Coding → Designing", "Testing → Designing → Coding"],
    "answer": "Designing → Coding → Testing",
    "explanation": "Programs must be designed before implementation and testing.",
    "theory": "Software development life cycle basics.",
    "justification_of_question": "Checks understanding of logical workflow.",
    "expected_time": 30,
    "hint": "Think SDLC order.",
    "keywords": ["design", "testing", "coding"]
  },
  {
    "id": "DE_AL_10",
    "category": "Development & Engineering",
    "sub_skill": "Algorithmic Logic",
    "type": "true_false",
    "difficulty": "easy",
    "cognitive_process": "remember",
    "question": "True or False: An algorithm must always stop after a finite number of steps.",
    "options": ["True", "False"],
    "answer": "True",
    "explanation": "One of the key properties of algorithms is termination.",
    "theory": "Properties of algorithms.",
    "justification_of_question": "Verifies basic algorithmic definition.",
    "expected_time": 15,
    "hint": "Think algorithm rules.",
    "keywords": ["termination", "algorithm"]
  },








  {
    "id": "DE_DA_1",
    "category": "Development & Engineering",
    "sub_skill": "Debugging & Error Analysis",
    "type": "msq",
    "difficulty": "easy",
    "cognitive_process": "analyze",
    "question": "If a pseudocode prints wrong total marks, what is the first step to find the error?",
    "options": ["Check input values", "Add print statements", "Rewrite code", "Run multiple times"],
    "answer": "Add print statements",
    "explanation": "Tracing variable values helps locate logic issues.",
    "theory": "Debugging and tracing methods.",
    "justification_of_question": "Teaches simple debugging using trace outputs.",
    "expected_time": 25,
    "hint": "Observe variable changes.",
    "keywords": ["debug", "trace"]
  },
  {
    "id": "DE_DA_2",
    "category": "Development & Engineering",
    "sub_skill": "Debugging & Error Analysis",
    "type": "msq",
    "difficulty": "medium",
    "cognitive_process": "evaluate",
    "question": "The program gives no output but no errors either. What is most likely wrong?",
    "options": ["Missing print statement", "Infinite loop", "Syntax error", "Incorrect input"],
    "answer": "Missing print statement",
    "explanation": "No print means no visible result.",
    "theory": "Common beginner programming errors.",
    "justification_of_question": "Assesses ability to reason through missing output cases.",
    "expected_time": 30,
    "hint": "Think about how output appears.",
    "keywords": ["output", "debugging"]
  },
  {
    "id": "DE_DA_3",
    "category": "Development & Engineering",
    "sub_skill": "Debugging & Error Analysis",
    "type": "msq",
    "difficulty": "medium",
    "cognitive_process": "analyze",
    "question": "What error occurs if a variable is used before being assigned a value?",
    "options": ["Syntax Error", "Runtime Error", "Logic Error", "Compilation Warning"],
    "answer": "Runtime Error",
    "explanation": "The program crashes when it reaches uninitialized variable usage.",
    "theory": "Runtime errors in beginner code.",
    "justification_of_question": "Tests understanding of variable initialization issues.",
    "expected_time": 25,
    "hint": "Not an error the compiler sees.",
    "keywords": ["runtime", "variable"]
  },
  {
    "id": "DE_DA_4",
    "category": "Development & Engineering",
    "sub_skill": "Debugging & Error Analysis",
    "type": "msq",
    "difficulty": "hard",
    "cognitive_process": "analyze",
    "question": "Which logical mistake causes incorrect average calculation?\n\nsum = 0; count = 0\nWHILE count < 5\n   READ num\n   sum = sum + num\nEND WHILE\naverage = sum / count",
    "options": ["count never increases", "wrong operator", "sum initialized wrongly", "division by zero"],
    "answer": "count never increases",
    "explanation": "The loop never updates count, so condition never ends.",
    "theory": "Logic errors in loop control.",
    "justification_of_question": "Develops debugging thinking about control variables.",
    "expected_time": 40,
    "hint": "Check loop condition variables.",
    "keywords": ["loop", "logic", "average"]
  },
  {
    "id": "DE_DA_5",
    "category": "Development & Engineering",
    "sub_skill": "Debugging & Error Analysis",
    "type": "true_false",
    "difficulty": "easy",
    "cognitive_process": "remember",
    "question": "True or False: A syntax error prevents the program from running.",
    "options": ["True", "False"],
    "answer": "True",
    "explanation": "Syntax errors stop compilation or interpretation.",
    "theory": "Error types.",
    "justification_of_question": "Checks basic concept of syntax errors.",
    "expected_time": 15,
    "hint": "Think before execution.",
    "keywords": ["syntax", "error"]
  },
{
  "id": "DE_DA_6",
  "category": "Development & Engineering",
  "sub_skill": "Debugging & Error Analysis",
  "type": "msq",
  "difficulty": "medium",
  "cognitive_process": "analyze",
  "question": "A program calculates total = total + value but always prints 0. Which error is most likely?",
  "options": [
    "value is not updated",
    "total initialized inside loop",
    "wrong arithmetic operator",
    "print statement missing"
  ],
  "answer": "total initialized inside loop",
  "explanation": "If 'total' resets in each loop iteration, it never accumulates values.",
  "theory": "Variable scope and initialization in loops.",
  "justification_of_question": "Helps learners identify common logical placement mistakes in loops.",
  "expected_time": 30,
  "hint": "Think about where the variable is declared.",
  "keywords": ["variable", "loop", "accumulator", "error"]
},
{
  "id": "DE_DA_7",
  "category": "Development & Engineering",
  "sub_skill": "Debugging & Error Analysis",
  "type": "msq",
  "difficulty": "medium",
  "cognitive_process": "evaluate",
  "question": "A student’s code runs but gives the wrong answer. What kind of error is this?",
  "options": [
    "Syntax error",
    "Runtime error",
    "Logic error",
    "System error"
  ],
  "answer": "Logic error",
  "explanation": "Logic errors produce incorrect results while the program still executes.",
  "theory": "Difference between syntax, runtime, and logic errors.",
  "justification_of_question": "Tests conceptual distinction between types of programming errors.",
  "expected_time": 20,
  "hint": "Does the program crash or just give wrong output?",
  "keywords": ["logic", "error", "output", "debugging"]
},
{
  "id": "DE_DA_8",
  "category": "Development & Engineering",
  "sub_skill": "Debugging & Error Analysis",
  "type": "msq",
  "difficulty": "hard",
  "cognitive_process": "analyze",
  "question": "What will happen if a loop condition never becomes false?",
  "options": [
    "The loop stops after one iteration",
    "The program crashes immediately",
    "The loop runs infinitely",
    "The condition resets automatically"
  ],
  "answer": "The loop runs infinitely",
  "explanation": "A loop that never satisfies its exit condition runs endlessly.",
  "theory": "Loop control and termination logic.",
  "justification_of_question": "Builds understanding of infinite loop debugging.",
  "expected_time": 35,
  "hint": "Consider what happens when condition never changes.",
  "keywords": ["loop", "condition", "infinite"]
},
{
  "id": "DE_DA_9",
  "category": "Development & Engineering",
  "sub_skill": "Debugging & Error Analysis",
  "type": "true_false",
  "difficulty": "easy",
  "cognitive_process": "remember",
  "question": "True or False: Logic errors are detected by the compiler before running the program.",
  "options": ["True", "False"],
  "answer": "False",
  "explanation": "Logic errors are only found when the program produces incorrect results.",
  "theory": "Program execution and error detection phases.",
  "justification_of_question": "Checks knowledge of compilation vs. runtime detection.",
  "expected_time": 15,
  "hint": "Think: can compiler understand logic?",
  "keywords": ["logic error", "compiler", "debugging"]
},
{
  "id": "DE_DA_10",
  "category": "Development & Engineering",
  "sub_skill": "Debugging & Error Analysis",
  "type": "msq",
  "difficulty": "medium",
  "cognitive_process": "apply",
  "question": "A student finds that the program stops halfway without showing an error. What should be checked first?",
  "options": [
    "Loop condition and counter variables",
    "System memory capacity",
    "Internet connection",
    "Compiler version"
  ],
  "answer": "Loop condition and counter variables",
  "explanation": "A faulty loop condition may cause premature termination.",
  "theory": "Program control flow and logical debugging.",
  "justification_of_question": "Develops reasoning on identifying hidden logical termination issues.",
  "expected_time": 30,
  "hint": "Focus on what controls repetition.",
  "keywords": ["loop", "termination", "debugging", "counter"]
  },





  {
    "id": "DE_PD_1",
    "category": "Development & Engineering",
    "sub_skill": "Problem Decomposition",
    "type": "msq",
    "difficulty": "medium",
    "cognitive_process": "analyze",
    "question": "Which is the best first step to solve a computational problem?",
    "options": ["Identify inputs and outputs", "Write code", "Add user interface", "Estimate runtime"],
    "answer": "Identify inputs and outputs",
    "explanation": "You must understand what goes in and comes out.",
    "theory": "Problem analysis.",
    "justification_of_question": "Tests foundational problem-solving approach.",
    "expected_time": 30,
    "hint": "Think before coding.",
    "keywords": ["inputs", "outputs"]
  },
  {
    "id": "DE_PD_2",
    "category": "Development & Engineering",
    "sub_skill": "Problem Decomposition",
    "type": "msq",
    "difficulty": "medium",
    "cognitive_process": "analyze",
    "question": "Breaking a large task into smaller logical parts is known as:",
    "options": ["Iteration", "Recursion", "Modularization", "Looping"],
    "answer": "Modularization",
    "explanation": "Each part can be coded separately.",
    "theory": "Structured programming principles.",
    "justification_of_question": "Evaluates decomposition ability.",
    "expected_time": 25,
    "hint": "Think 'divide and conquer'.",
    "keywords": ["modularization", "functions"]
  },
  {
    "id": "DE_PD_3",
    "category": "Development & Engineering",
    "sub_skill": "Problem Decomposition",
    "type": "msq",
    "difficulty": "hard",
    "cognitive_process": "create",
    "question": "You plan a system to record student attendance. What should be the first module?",
    "options": ["Attendance report", "Student registration", "Data analysis", "Export to Excel"],
    "answer": "Student registration",
    "explanation": "You must identify students before recording attendance.",
    "theory": "System design order.",
    "justification_of_question": "Tests logical breakdown of real-world problem.",
    "expected_time": 40,
    "hint": "Think what comes first in process.",
    "keywords": ["planning", "modules"]
  },
{
  "id": "DE_PD_4",
  "category": "Development & Engineering",
  "sub_skill": "Problem Decomposition",
  "type": "msq",
  "difficulty": "easy",
  "cognitive_process": "understand",
  "question": "When solving a problem like 'calculate student average marks', what is the first logical sub-task?",
  "options": [
    "Display results",
    "Read marks input",
    "Sort the marks",
    "Save to a file"
  ],
  "answer": "Read marks input",
  "explanation": "Inputs must be collected before calculations can occur.",
  "theory": "Input–Process–Output model.",
  "justification_of_question": "Builds sequencing skills in modular thinking.",
  "expected_time": 25,
  "hint": "You can’t calculate without input data.",
  "keywords": ["IPO", "input", "sequence", "problem solving"]
},
{
  "id": "DE_PD_5",
  "category": "Development & Engineering",
  "sub_skill": "Problem Decomposition",
  "type": "msq",
  "difficulty": "medium",
  "cognitive_process": "apply",
  "question": "A teacher wants a program to manage attendance, marks, and reports. Which of the following is NOT a valid sub-module?",
  "options": [
    "Attendance tracker",
    "Marks calculator",
    "Weather forecast",
    "Report generator"
  ],
  "answer": "Weather forecast",
  "explanation": "This feature is unrelated to the school system goal.",
  "theory": "Functional decomposition and module relevance.",
  "justification_of_question": "Tests ability to identify unrelated modules in a system.",
  "expected_time": 30,
  "hint": "Stay within the context of education software.",
  "keywords": ["modules", "system design", "relevance"]
},
{
  "id": "DE_PD_6",
  "category": "Development & Engineering",
  "sub_skill": "Problem Decomposition",
  "type": "msq",
  "difficulty": "medium",
  "cognitive_process": "analyze",
  "question": "A developer divides a 'Library System' into 'Book Management', 'Member Management', and 'Borrowing Module'. What concept is used here?",
  "options": [
    "Looping",
    "Modularization",
    "Iteration",
    "Data abstraction"
  ],
  "answer": "Modularization",
  "explanation": "Splitting into functional modules simplifies maintenance and testing.",
  "theory": "Modular programming in system design.",
  "justification_of_question": "Checks understanding of modular decomposition.",
  "expected_time": 25,
  "hint": "Think of dividing system by its function.",
  "keywords": ["modules", "library", "system design"]
},
{
  "id": "DE_PD_7",
  "category": "Development & Engineering",
  "sub_skill": "Problem Decomposition",
  "type": "msq",
  "difficulty": "hard",
  "cognitive_process": "create",
  "question": "In designing a mobile payment app, which sequence of modules is most logical?",
  "options": [
    "Payment → Login → Confirmation",
    "Login → Payment → Confirmation",
    "Confirmation → Payment → Login",
    "Payment → Confirmation → Logout"
  ],
  "answer": "Login → Payment → Confirmation",
  "explanation": "The user must log in first, then make payment, and finally confirm the transaction.",
  "theory": "Workflow analysis and process structuring.",
  "justification_of_question": "Develops sequential decomposition skills for real applications.",
  "expected_time": 40,
  "hint": "Think of steps a real user would take.",
  "keywords": ["workflow", "mobile", "process design"]
},
{
  "id": "DE_PD_8",
  "category": "Development & Engineering",
  "sub_skill": "Problem Decomposition",
  "type": "msq",
  "difficulty": "easy",
  "cognitive_process": "understand",
  "question": "Why is it important to divide a big problem into smaller sub-tasks?",
  "options": [
    "It increases the coding time",
    "It makes testing and debugging easier",
    "It makes the program longer",
    "It hides all details"
  ],
  "answer": "It makes testing and debugging easier",
  "explanation": "Smaller modules can be individually tested and fixed.",
  "theory": "Advantages of modular decomposition.",
  "justification_of_question": "Reinforces benefits of modular thinking.",
  "expected_time": 20,
  "hint": "Think about debugging small vs large code blocks.",
  "keywords": ["debugging", "testing", "modular"]
},
{
  "id": "DE_PD_9",
  "category": "Development & Engineering",
  "sub_skill": "Problem Decomposition",
  "type": "true_false",
  "difficulty": "easy",
  "cognitive_process": "remember",
  "question": "True or False: Each sub-task in a program should perform one specific function.",
  "options": ["True", "False"],
  "answer": "True",
  "explanation": "This ensures simplicity and clarity in design.",
  "theory": "Single Responsibility Principle.",
  "justification_of_question": "Introduces software engineering principle of focused modules.",
  "expected_time": 15,
  "hint": "Think simplicity in each module.",
  "keywords": ["single function", "SRP", "clarity"]
},
{
  "id": "DE_PD_10",
  "category": "Development & Engineering",
  "sub_skill": "Problem Decomposition",
  "type": "msq",
  "difficulty": "medium",
  "cognitive_process": "apply",
  "question": "When planning a web-based quiz system, which of the following is the correct decomposition order?",
  "options": [
    "Score calculation → Question display → User login",
    "User login → Question display → Score calculation",
    "Question display → User login → Score calculation",
    "Question display → Score calculation → Logout"
  ],
  "answer": "User login → Question display → Score calculation",
  "explanation": "A user must log in before answering questions and viewing scores.",
  "theory": "Logical sequence in web system design.",
  "justification_of_question": "Evaluates ability to identify functional order of processes.",
  "expected_time": 35,
  "hint": "Think user journey through system.",
  "keywords": ["quiz", "workflow", "sequence", "system design"]
},






  {
    "id": "DE_AP_1",
    "category": "Development & Engineering",
    "sub_skill": "Abstraction & Pattern Recognition",
    "type": "msq",
    "difficulty": "medium",
    "cognitive_process": "analyze",
    "question": "Which concept means focusing on essential details while hiding complexity?",
    "options": ["Recursion", "Abstraction", "Looping", "Encapsulation"],
    "answer": "Abstraction",
    "explanation": "It simplifies problem solving.",
    "theory": "Abstraction in programming.",
    "justification_of_question": "Checks conceptual clarity of abstraction.",
    "expected_time": 25,
    "hint": "Think about hiding complexity.",
    "keywords": ["abstraction"]
  },
  {
    "id": "DE_AP_2",
    "category": "Development & Engineering",
    "sub_skill": "Abstraction & Pattern Recognition",
    "type": "msq",
    "difficulty": "medium",
    "cognitive_process": "apply",
    "question": "In daily life, recognizing that 'copy-paste' in computers and 'duplicate' in phones perform similar actions shows:",
    "options": ["Iteration", "Debugging", "Pattern Recognition", "Testing"],
    "answer": "Pattern Recognition",
    "explanation": "Both functions follow the same idea.",
    "theory": "Analogy-based reasoning.",
    "justification_of_question": "Links cognitive pattern recognition to computing.",
    "expected_time": 20,
    "hint": "Think about similar actions.",
    "keywords": ["pattern", "analogy"]
  },
{
  "id": "DE_AP_3",
  "category": "Development & Engineering",
  "sub_skill": "Abstraction & Pattern Recognition",
  "type": "msq",
  "difficulty": "easy",
  "cognitive_process": "understand",
  "question": "What is the main goal of using abstraction in programming?",
  "options": [
    "To make programs more complex",
    "To hide unnecessary details",
    "To increase code length",
    "To slow down execution"
  ],
  "answer": "To hide unnecessary details",
  "explanation": "Abstraction keeps only essential features and hides the rest.",
  "theory": "Simplification through abstraction.",
  "justification_of_question": "Introduces practical purpose of abstraction in system design.",
  "expected_time": 20,
  "hint": "Focus on simplicity and clarity.",
  "keywords": ["abstraction", "simplification", "concept"]
},
{
  "id": "DE_AP_4",
  "category": "Development & Engineering",
  "sub_skill": "Abstraction & Pattern Recognition",
  "type": "true_false",
  "difficulty": "easy",
  "cognitive_process": "remember",
  "question": "True or False: Pattern recognition helps identify similarities between different problems.",
  "options": ["True", "False"],
  "answer": "True",
  "explanation": "Recognizing patterns is a key part of computational thinking.",
  "theory": "Core skill in algorithmic reasoning.",
  "justification_of_question": "Tests understanding of pattern-based reasoning.",
  "expected_time": 15,
  "hint": "Think of finding repeating ideas.",
  "keywords": ["pattern", "recognition", "thinking"]
},
{
  "id": "DE_AP_5",
  "category": "Development & Engineering",
  "sub_skill": "Abstraction & Pattern Recognition",
  "type": "msq",
  "difficulty": "medium",
  "cognitive_process": "analyze",
  "question": "When developing a quiz app, identifying that each question has 'text', 'options', and 'answer' represents:",
  "options": [
    "Debugging",
    "Abstraction",
    "Recursion",
    "Encapsulation"
  ],
  "answer": "Abstraction",
  "explanation": "Common structure recognition simplifies design.",
  "theory": "Defining essential data components.",
  "justification_of_question": "Tests ability to generalize structure across objects.",
  "expected_time": 25,
  "hint": "Look for what is common to all items.",
  "keywords": ["structure", "abstraction", "object"]
},
{
  "id": "DE_AP_6",
  "category": "Development & Engineering",
  "sub_skill": "Abstraction & Pattern Recognition",
  "type": "msq",
  "difficulty": "medium",
  "cognitive_process": "apply",
  "question": "If two different algorithms use similar looping patterns, what cognitive process is at play?",
  "options": [
    "Pattern recognition",
    "Testing",
    "Debugging",
    "Error handling"
  ],
  "answer": "Pattern recognition",
  "explanation": "Identifying repeating algorithmic structure is pattern recognition.",
  "theory": "Recognizing structural similarities in logic.",
  "justification_of_question": "Encourages observation of recurring computational techniques.",
  "expected_time": 25,
  "hint": "Think repetition in logic.",
  "keywords": ["pattern", "loop", "structure"]
},
{
  "id": "DE_AP_7",
  "category": "Development & Engineering",
  "sub_skill": "Abstraction & Pattern Recognition",
  "type": "msq",
  "difficulty": "hard",
  "cognitive_process": "analyze",
  "question": "In a transport system model, replacing 'bus', 'train', and 'car' with one general term 'vehicle' is an example of:",
  "options": [
    "Encapsulation",
    "Abstraction",
    "Overloading",
    "Recursion"
  ],
  "answer": "Abstraction",
  "explanation": "Abstraction groups similar items into one general concept.",
  "theory": "Generalization and class hierarchy design.",
  "justification_of_question": "Tests higher-level conceptual grouping ability.",
  "expected_time": 35,
  "hint": "Think about grouping by similarity.",
  "keywords": ["abstraction", "generalization", "modeling"]
},
{
  "id": "DE_AP_8",
  "category": "Development & Engineering",
  "sub_skill": "Abstraction & Pattern Recognition",
  "type": "msq",
  "difficulty": "medium",
  "cognitive_process": "create",
  "question": "If a student designs multiple calculators (for BMI, Average, and Budget) using the same layout, what are they applying?",
  "options": [
    "Pattern recognition",
    "Random design",
    "Recursion",
    "Debugging"
  ],
  "answer": "Pattern recognition",
  "explanation": "They recognize a reusable interface pattern across different applications.",
  "theory": "Design pattern reuse.",
  "justification_of_question": "Encourages thinking about reusable patterns in software design.",
  "expected_time": 30,
  "hint": "Focus on reusing a common structure.",
  "keywords": ["pattern", "reuse", "design"]
},
{
  "id": "DE_AP_9",
  "category": "Development & Engineering",
  "sub_skill": "Abstraction & Pattern Recognition",
  "type": "true_false",
  "difficulty": "easy",
  "cognitive_process": "remember",
  "question": "True or False: Abstraction removes all details from a system.",
  "options": ["True", "False"],
  "answer": "False",
  "explanation": "Abstraction hides only unnecessary details, not everything.",
  "theory": "Selective information hiding.",
  "justification_of_question": "Corrects common misconception about abstraction.",
  "expected_time": 15,
  "hint": "Essential details must remain visible.",
  "keywords": ["abstraction", "details", "concept"]
},
{
  "id": "DE_AP_10",
  "category": "Development & Engineering",
  "sub_skill": "Abstraction & Pattern Recognition",
  "type": "msq",
  "difficulty": "hard",
  "cognitive_process": "analyze",
  "question": "A student observes that every sorting algorithm compares pairs of values. What does this observation represent?",
  "options": [
    "Pattern recognition",
    "Debugging",
    "Encapsulation",
    "Recursion"
  ],
  "answer": "Pattern recognition",
  "explanation": "Identifying a recurring step common to sorting algorithms is pattern recognition.",
  "theory": "Observation and pattern analysis in algorithms.",
  "justification_of_question": "Evaluates analytical ability to generalize algorithmic behavior.",
  "expected_time": 35,
  "hint": "Think about what repeats across algorithms.",
  "keywords": ["pattern", "sorting", "algorithm"]
},




  {
    "id": "DE_TC_1",
    "category": "Development & Engineering",
    "sub_skill": "Time Complexity Awareness",
    "type": "msq",
    "difficulty": "easy",
    "cognitive_process": "understand",
    "question": "A program sorts 10 numbers in 2 seconds and 100 numbers in 20 seconds. What can we say?",
    "options": ["Takes linear time", "Takes constant time", "Takes logarithmic time", "Unrelated time"],
    "answer": "Takes linear time",
    "explanation": "Time increases proportionally with input.",
    "theory": "Efficiency in algorithms.",
    "justification_of_question": "Introduces intuitive time complexity understanding.",
    "expected_time": 25,
    "hint": "Compare growth rates.",
    "keywords": ["time", "efficiency"]
  },
  {
  "id": "DE_TC_2",
  "category": "Development & Engineering",
  "sub_skill": "Time Complexity Awareness",
  "type": "msq",
  "difficulty": "easy",
  "cognitive_process": "understand",
  "question": "If a program takes longer when you double the number of inputs, what does that show?",
  "options": [
    "The program has no relation with input size",
    "The running time increases with input size",
    "The program runs faster with more data",
    "The algorithm stops working"
  ],
  "answer": "The running time increases with input size",
  "explanation": "More data requires more operations.",
  "theory": "Relationship between input size and execution time.",
  "justification_of_question": "Tests intuitive grasp of how input affects performance.",
  "expected_time": 20,
  "hint": "Think about cause and effect between data and time.",
  "keywords": ["input", "execution", "performance"]
},
{
  "id": "DE_TC_3",
  "category": "Development & Engineering",
  "sub_skill": "Time Complexity Awareness",
  "type": "msq",
  "difficulty": "medium",
  "cognitive_process": "analyze",
  "question": "Two sorting programs handle 1,000 records: Program A takes 10s, Program B takes 5s. Which is more efficient?",
  "options": ["Program A", "Program B", "Both equal", "Cannot say"],
  "answer": "Program B",
  "explanation": "Less time for the same data indicates better efficiency.",
  "theory": "Comparing algorithm performance.",
  "justification_of_question": "Introduces performance comparison logic.",
  "expected_time": 25,
  "hint": "Less time → higher efficiency.",
  "keywords": ["sorting", "performance", "efficiency"]
},
{
  "id": "DE_TC_4",
  "category": "Development & Engineering",
  "sub_skill": "Time Complexity Awareness",
  "type": "true_false",
  "difficulty": "easy",
  "cognitive_process": "remember",
  "question": "True or False: An algorithm that repeats the same number of steps regardless of input has constant time.",
  "options": ["True", "False"],
  "answer": "True",
  "explanation": "Constant-time operations do not depend on input size.",
  "theory": "Definition of O(1) complexity.",
  "justification_of_question": "Checks understanding of constant-time behavior.",
  "expected_time": 15,
  "hint": "Independent of input.",
  "keywords": ["constant", "O(1)", "definition"]
},
{
  "id": "DE_TC_5",
  "category": "Development & Engineering",
  "sub_skill": "Time Complexity Awareness",
  "type": "msq",
  "difficulty": "medium",
  "cognitive_process": "apply",
  "question": "Which of the following will generally run fastest for large data sets?",
  "options": [
    "Linear search",
    "Binary search",
    "Bubble sort",
    "Nested loop comparison"
  ],
  "answer": "Binary search",
  "explanation": "Binary search reduces comparisons by halving data each time.",
  "theory": "Comparing linear vs logarithmic growth.",
  "justification_of_question": "Tests practical knowledge of efficiency difference.",
  "expected_time": 35,
  "hint": "Which method skips more data per step?",
  "keywords": ["binary search", "logarithmic", "efficiency"]
},
{
  "id": "DE_TC_6",
  "category": "Development & Engineering",
  "sub_skill": "Time Complexity Awareness",
  "type": "msq",
  "difficulty": "medium",
  "cognitive_process": "analyze",
  "question": "An algorithm takes 1s for 10 items and 4s for 20 items. What pattern does this suggest?",
  "options": [
    "Linear growth",
    "Quadratic growth",
    "Constant growth",
    "Random growth"
  ],
  "answer": "Quadratic growth",
  "explanation": "Time increases roughly by the square of the input size.",
  "theory": "Non-linear complexity understanding.",
  "justification_of_question": "Helps recognize when time growth is more than linear.",
  "expected_time": 40,
  "hint": "Check how much time multiplies when input doubles.",
  "keywords": ["quadratic", "growth", "pattern"]
},
{
  "id": "DE_TC_7",
  "category": "Development & Engineering",
  "sub_skill": "Time Complexity Awareness",
  "type": "msq",
  "difficulty": "hard",
  "cognitive_process": "analyze",
  "question": "If an algorithm has two nested loops each running 'n' times, what is the approximate time complexity?",
  "options": ["O(n)", "O(2n)", "O(n^2)", "O(log n)"],
  "answer": "O(n^2)",
  "explanation": "Each iteration of one loop runs another loop n times.",
  "theory": "Nested loop complexity concept.",
  "justification_of_question": "Links practical loop structure with complexity notation.",
  "expected_time": 45,
  "hint": "Multiply iterations of loops.",
  "keywords": ["nested loops", "O(n^2)", "complexity"]
},
{
  "id": "DE_TC_8",
  "category": "Development & Engineering",
  "sub_skill": "Time Complexity Awareness",
  "type": "msq",
  "difficulty": "hard",
  "cognitive_process": "evaluate",
  "question": "Two algorithms have O(n) and O(n^2) complexities. Which will likely perform better for large n?",
  "options": ["O(n)", "O(n^2)", "Both same", "Depends on constants only"],
  "answer": "O(n)",
  "explanation": "Linear algorithms scale better with large input sizes.",
  "theory": "Asymptotic behavior of algorithms.",
  "justification_of_question": "Evaluates higher-order reasoning about growth trends.",
  "expected_time": 40,
  "hint": "Think about how fast each grows when n increases.",
  "keywords": ["O(n)", "O(n^2)", "growth"]
},
{
  "id": "DE_TC_9",
  "category": "Development & Engineering",
  "sub_skill": "Time Complexity Awareness",
  "type": "true_false",
  "difficulty": "easy",
  "cognitive_process": "remember",
  "question": "True or False: Optimizing an algorithm can reduce both time and memory usage.",
  "options": ["True", "False"],
  "answer": "True",
  "explanation": "Better logic often improves multiple efficiency factors.",
  "theory": "Optimization trade-offs.",
  "justification_of_question": "Introduces concept of performance optimization.",
  "expected_time": 20,
  "hint": "Think about efficiency improvements.",
  "keywords": ["optimization", "efficiency", "performance"]
},
{
  "id": "DE_TC_10",
  "category": "Development & Engineering",
  "sub_skill": "Time Complexity Awareness",
  "type": "msq",
  "difficulty": "medium",
  "cognitive_process": "apply",
  "question": "A student writes two functions: one prints 10 numbers, the other prints n numbers. Which is more scalable?",
  "options": [
    "The one that prints 10 numbers",
    "The one that prints n numbers",
    "Both equally scalable",
    "Cannot determine"
  ],
  "answer": "The one that prints n numbers",
  "explanation": "The function depending on n can adapt to varying input sizes.",
  "theory": "Algorithm scalability concept.",
  "justification_of_question": "Tests understanding of scalability vs fixed logic.",
  "expected_time": 25,
  "hint": "Think flexibility with growing input.",
  "keywords": ["scalability", "n", "function", "complexity"]
}
]
